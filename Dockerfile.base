ARG BASEIMG=python:3.10
FROM --platform=linux/arm64 ${BASEIMG}

# set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# install system dependencies including build tools for Solidity
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    librdkafka-dev \
    libhdf5-dev \
    wget \
    unzip \
    curl \
    git \
    cmake \
    ninja-build \
    libboost-all-dev \
    && rm -rf /var/lib/apt/lists/*

ARG SOLIDITY_VERSION=0.8.20

# Build Solidity compiler from source for ARM64
WORKDIR /tmp
RUN wget https://github.com/ethereum/solidity/releases/download/v${SOLIDITY_VERSION}/solidity_${SOLIDITY_VERSION}.tar.gz && \
    tar -xzf solidity_${SOLIDITY_VERSION}.tar.gz && \
    cd solidity_${SOLIDITY_VERSION} && \
    mkdir build && \
    cd build && \
    cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DTESTS=OFF && \
    ninja && \
    cp solc/solc /usr/local/bin/solc && \
    chmod +x /usr/local/bin/solc

# Create the directory structure that py-solc-x expects
RUN mkdir -p /root/.solcx && \
    cp /usr/local/bin/solc /root/.solcx/solc-v${SOLIDITY_VERSION}

# Verify that the binary works
RUN solc --version && \
    /root/.solcx/solc-v${SOLIDITY_VERSION} --version

# Install Foundry (Anvil) for local blockchain server
WORKDIR /tmp
RUN curl -L https://foundry.paradigm.xyz | bash && \
    /root/.foundry/bin/foundryup

# Add foundry to PATH
ENV PATH="/root/.foundry/bin:$PATH"

# Verify Anvil installation
RUN anvil --version

# Clean up build artifacts
RUN rm -rf /tmp/solidity_${SOLIDITY_VERSION} /tmp/solidity_${SOLIDITY_VERSION}.tar.gz

# Set work directory for derived images
WORKDIR /usr/src/app

# Upgrade pip
RUN pip install --upgrade pip

RUN pip install tensorflow==2.12.0 tensorflow-io==0.32.0


